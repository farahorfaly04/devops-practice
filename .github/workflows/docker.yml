name: deploy-containerized-app

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-A-DEV
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  REGISTRY_LOGIN_SERVER: farahcontainerregistry.azurecr.io # Replace with your ACR login server
  IMAGE_BASE_NAME: farahimage # Replace with your Docker image name
  WEBAPP_NAME: farahWebApp # Replace with your Web App name
  KEY_VAULT_NAME: farahKeyVault # Replace with your Key Vault name
  ACR_USERNAME_SECRET: acrAdminUserNameSecretName # Replace with your Key Vault secret name for ACR username
  ACR_PASSWORD0_SECRET: acrAdminUserPassword0SecretName # Replace with your Key Vault secret name for ACR password
  ACR_PASSWORD1_SECRET: acrAdminUserPassword1SecretName # Replace with your Key Vault secret name for ACR password

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v2

      # Step 2: Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get docker registry credentials from Azure Key Vault'
        uses: azure/CLI@v1
        with: 
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.ACR_USERNAME_SECRET }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD0=$(az keyvault secret show --name ${{ env.ACR_PASSWORD0_SECRET }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD1=$(az keyvault secret show --name ${{ env.ACR_PASSWORD1_SECRET }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV

      # Step 3: Login to Azure Container Registry
      - name: Login to ACR
        run: |
          echo "$REGISTRY_PASSWORD0" | docker login $REGISTRY_LOGIN_SERVER -u $REGISTRY_USERNAME --password-stdin

      # Step 4: Set image version
      - name: Set Image Version
        id: image-version
        run: echo "::set-output name=version::$(echo ${GITHUB_REF#refs/heads/})-$(date +'%Y.%m.%d.%H.%M')"

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:latest
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: 'Development'

    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v2

      # Step 2: Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Deploy Docker Image to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_BASE_NAME }}:latest